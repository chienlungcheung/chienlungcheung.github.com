<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>所有文章 - 二手知识</title><link>https://chienlungcheung.github.io/posts/</link><description>所有文章 | 二手知识</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>chienlungcheung@gmail.com (Hari)</managingEditor><webMaster>chienlungcheung@gmail.com (Hari)</webMaster><lastBuildDate>Mon, 27 Nov 2023 11:45:07 +0800</lastBuildDate><atom:link href="https://chienlungcheung.github.io/posts/" rel="self" type="application/rss+xml"/><item><title>招人！</title><link>https://chienlungcheung.github.io/ebg-hiring/</link><pubDate>Mon, 27 Nov 2023 11:45:07 +0800</pubDate><author><name>Hari</name></author><guid>https://chienlungcheung.github.io/ebg-hiring/</guid><description>AI算法工程师-CV 职责： 参与人脸识别、轨迹点识别的需求分析、识别引擎算法设计； 负责核心模块的程序设计和代码编写，解决重难点技术问题； 遵循公</description></item><item><title>自然语言的可计算性：从 N-gram 到 BERT</title><link>https://chienlungcheung.github.io/natural-language-computability-evolution/</link><pubDate>Sun, 19 Nov 2023 12:11:15 +0800</pubDate><author><name>Hari</name></author><guid>https://chienlungcheung.github.io/natural-language-computability-evolution/</guid><description>[toc] 语言符号化是逻辑计算的前提，最近这一百年，从图灵、丘奇到麦卡锡、闵斯基再到科尔莫格洛夫，这些前辈都在寻找语言的可计算性。最近这几十年，语言</description></item><item><title>复杂性及其应对：当我们在谈论软件工程的时候，我们在谈论什么</title><link>https://chienlungcheung.github.io/complexity-and-how-to-deal-with-it/</link><pubDate>Sun, 22 Oct 2023 10:58:04 +0800</pubDate><author><name>Hari</name></author><guid>https://chienlungcheung.github.io/complexity-and-how-to-deal-with-it/</guid><description>TL;DR: 本文介绍了复杂性的概念，以及如何应对复杂性的方法。复杂性是软件工程和团队管理的核心问题，应对复杂性的能力也是软件工程师的一项核心竞争力。本</description></item><item><title>推荐系统前深度学习时代：从协同过滤到 GBDT+LR</title><link>https://chienlungcheung.github.io/rs-algo-pre-deeplearning/</link><pubDate>Tue, 12 Sep 2023 00:43:30 +0800</pubDate><author><name>Hari</name></author><guid>https://chienlungcheung.github.io/rs-algo-pre-deeplearning/</guid><description>[toc] 本人身处广告营销领域，广告系统本质是个推荐系统，本文旨在梳理相关推荐算法。《深度学习推荐系统》是一本很不错的入门书籍，很系统，不过很多地方</description></item><item><title>社会化：当我们在讨论原生家庭时，我们在讨论什么</title><link>https://chienlungcheung.github.io/socialization/</link><pubDate>Fri, 08 Sep 2023 08:00:00 +0800</pubDate><author><name>Hari</name></author><guid>https://chienlungcheung.github.io/socialization/</guid><description>我一直反思自己同家境更好更年轻的同辈人的差距，他们年纪不大为人处事做得就很好，心态乐观不怕失败，年纪轻轻就取得了相比同辈更好的成绩。最近两年</description></item><item><title>Nacos 的一致性存储解析--Distro 篇</title><link>https://chienlungcheung.github.io/consistent-protocol-of-nacos-part-1/</link><pubDate>Fri, 19 Aug 2022 21:03:34 +0000</pubDate><author><name>Hari</name></author><guid>https://chienlungcheung.github.io/consistent-protocol-of-nacos-part-1/</guid><description>作为一个服务发现和配置管理基础设施, 一致性协议可以在集群内保证各类元数据的一致性. Nacos 提供了两个等级的一致性, CP 用于配置管理, AP 用于服务发现.</description></item><item><title>Leveldb 源码详解系列之八: 版本(Version)</title><link>https://chienlungcheung.github.io/leveldb-annotations-8-versions/</link><pubDate>Sat, 18 Jun 2022 01:22:28 +0800</pubDate><author><name>Hari</name></author><guid>https://chienlungcheung.github.io/leveldb-annotations-8-versions/</guid><description>Version 是 leveldb 在磁盘上的文件 level 结构的抽象, 也是访问磁盘文件的隘口. 也就是说, 要读取磁盘上的文件, 必须要经过 Version. 要针对磁盘上的数据库做一些优化或者统计,</description></item><item><title>LSM-Tree 论文阅读笔记</title><link>https://chienlungcheung.github.io/lsmtree-paper/</link><pubDate>Mon, 16 May 2022 20:26:17 +0800</pubDate><author><name>Hari</name></author><guid>https://chienlungcheung.github.io/lsmtree-paper/</guid><description>梳理 leveldb 压实逻辑的时候, 看代码逆向逻辑太难了, 非常零碎, 很难搞清楚作者为何那么实现, 想起来 LSM-Tree 论文还没读过, 于是找了读了一下, 可是 原始论文 太晦涩</description></item><item><title>Leveldb 源码详解系列之七: 压实(Compaction)</title><link>https://chienlungcheung.github.io/leveldb-annotations-7-compaction/</link><pubDate>Wed, 27 Oct 2021 22:27:17 +0800</pubDate><author><name>Hari</name></author><guid>https://chienlungcheung.github.io/leveldb-annotations-7-compaction/</guid><description>Leveldb 是一个 LSM-Tree 类型的数据库, LSM 最后一个字母就是 merge, 压实就是 merge 具体实现. 该算法在 LSM-Tree 论文阅读笔记 里有介绍, 如果不了解建议先读下这篇小文. 1. 压实介绍当 level-L</description></item><item><title>Leveldb 源码详解系列之六: 文件缓存设计与实现</title><link>https://chienlungcheung.github.io/leveldb-annotations-6-table-cache/</link><pubDate>Tue, 29 Jun 2021 22:35:43 +0800</pubDate><author><name>Hari</name></author><guid>https://chienlungcheung.github.io/leveldb-annotations-6-table-cache/</guid><description><![CDATA[<p>上一篇讲了 leveldb 中 <code>Table</code> 的设计和实现, 它是磁盘 sstable 文件的内存形式, 但是 <code>Table</code> 在实际中不会被用户直接用到, 而是借助 <code>TableCache</code>.</p>]]></description></item></channel></rss>